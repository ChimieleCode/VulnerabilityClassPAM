from ..simple_fragility import SimpleLogNormalFragility

import unittest
import numpy as np


class TestSimpleLogNormalFragility(unittest.TestCase):
    def setUp(self):
        self.fragility_model = SimpleLogNormalFragility(beta_=1.0, mu=2.0)

    def test_validation(self):
        # Test with non-numerical input
        with self.assertRaises((TypeError, ValueError)):
            self.fragility_model.probability_of_exceedance("string")

        # Test with numerical input
        try:
            self.fragility_model.probability_of_exceedance(5.0)
        except (TypeError, ValueError):
            self.fail("Validation failed unexpectedly!")

    def test_negative_values_yield_numerical_zero(self):
        # Test that negative values yield numerical zeros within a certain range
        input_value = 0
        result = self.fragility_model.probability_of_exceedance(input_value)
        self.assertAlmostEqual(result, 0.0, delta=1e-6)

    def test_float_inputs_yield_float_outputs(self):
        # Test that float inputs yield float outputs
        input_value = 1.5
        result = self.fragility_model.probability_of_exceedance(input_value)
        self.assertIsInstance(result, float)

    def test_2d_array_input(self):
        # Test 2D array input
        input_array = np.array([[0.5, 1.0, -1], [0.9, 0.4, 2.0]])
        result = self.fragility_model.probability_of_exceedance(input_array)

        self.assertIsInstance(result, np.ndarray)
        self.assertEqual(result.shape, input_array.shape)

    def test_1d_array_input(self):
        # Test 1D array input
        input_array = np.array([0.5, 1.0, 0.9, 0.4, 2.0])
        result = self.fragility_model.probability_of_exceedance(input_array)

        self.assertIsInstance(result, np.ndarray)
        self.assertEqual(result.shape, input_array.shape)


if __name__ == '__main__':
    unittest.main()