import numpy as np
import numpy.typing as npt
from dataclasses import dataclass
from scipy.optimize import root
from typing import Union

def find_x(y):
    # Define the function to be minimized (difference between f(x) and y)
    def g(x):
        return f(x, y) - y

    # Initial guess for x (can be adjusted based on your problem)
    x0 = 0.5

    # Find the root using Newton-Raphson method
    result = root(g, x0)

    if result.success:
        return result.x[0]  # Return the first solution found
    else:
        print("No solution found within specified tolerance.")
        return None  # Indicate no solution found

# Example usage (replace y with your actual value)
y_value = 2
x = find_x(y_value)

if x is not None:
    print("Found x =", x)
else:
    print("No solution found for y =", y_value)

from .hazard_mode_interface import HazardModel


@dataclass
class SecondOrderHazard(HazardModel):
    """

    """
    k0: float
    k1: float
    k2: float

    @staticmethod
    def _validate_input(data: Union[float, int, np.ndarray]) -> np.ndarray:
        """
        Validates the input data to ensure it contains only numerical values.
        :param data: Input data to be validated.
        :return: Validated NumPy array.
        :raises TypeError: If data is not a float, int, or NumPy array.
        :raises ValueError: If data array does not contain numerical values.
        """
        if not isinstance(data, (float, int, np.ndarray)):
            raise TypeError("Input must be a float, int, or NumPy array")

        if not isinstance(data, np.ndarray):
            data = np.array([data])

        if not np.issubdtype(data.dtype, np.number):
            raise ValueError("Input data must contain numerical values")

        return data

    def probability_of_exceedance(self, intensity_measure: Union[float, int, npt.NDArray]) -> Union[float, npt.NDArray]:
        """
        Evaluates the probability of exceedance of the hazard model.
        :param intensity_measure: Intensity measure to evaluate.
        :return: Probability of exceedance.
        """
        # Saves if input is arraylike or scalar to yield a consistent output
        is_input_arraylike = isinstance(intensity_measure, np.ndarray)

        # Validate input
        intensity_measure = self._validate_input(intensity_measure)

        intensity_measure = intensity_measure.astype(float)
        # Avoid problems with logarithm
        intensity_measure[intensity_measure <= 0] = 10 ** -10

        ln_intensity_measure = np.log(intensity_measure)
        # Probability of exceedence
        probability = self.k0 * np.exp(-self.k2 * ln_intensity_measure**2 - self.k1 * ln_intensity_measure)

        # Convert back to intensity measure and handle array-like vs. scalar input
        if is_input_arraylike:
            return probability
        else:
            return probability[0]

    def intensity_measure(self, probability: Union[float, int, npt.NDArray]) -> Union[float, npt.NDArray]:
        """
        Calculates the intensity measure corresponding to a given probability of exceedance.
        :param intensity_measure:
        """

        raise NotImplemented
