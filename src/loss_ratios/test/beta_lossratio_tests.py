from ..beta_lossratio import BetaLossRatio

import unittest
import numpy as np

class TestBetaLossRatio(unittest.TestCase):
    def setUp(self):
        self.beta_loss_ratio = BetaLossRatio(mean_=0.5, cov_=0.2)

    def test_probability_of_exceedance_float_input(self):
        result = self.beta_loss_ratio.probability_of_exceedance(0.7)
        self.assertIsInstance(result, float, "Probability result is not a float")

    def test_probability_of_exceedance_array_input(self):
        input_array = np.array([0.6, 0.7, 0.8])
        result = self.beta_loss_ratio.probability_of_exceedance(input_array)
        self.assertIsInstance(result, np.ndarray, "Probability result for array input is not a NumPy array")
        self.assertEqual(len(result), len(input_array), "Output array length mismatch")

    def test_loss_ratio_float_input(self):
        result = self.beta_loss_ratio.loss_ratio(0.3)
        self.assertIsInstance(result, float, "Loss ratio result is not a float")

    def test_loss_ratio_array_input(self):
        input_array = np.array([0.2, 0.3, 0.4])
        result = self.beta_loss_ratio.loss_ratio(input_array)
        self.assertIsInstance(result, np.ndarray, "Loss ratio result for array input is not a NumPy array")
        self.assertEqual(len(result), len(input_array), "Output array length mismatch")

    def test_probability_of_exceedance_input_validation(self):
        with self.assertRaises(TypeError):
            self.beta_loss_ratio.probability_of_exceedance('invalid_input')

        with self.assertRaises(ValueError):
            self.beta_loss_ratio.probability_of_exceedance(np.array([-0.1, 0.5, 1.2]))

    def test_loss_ratio_input_validation(self):
        with self.assertRaises(TypeError):
            self.beta_loss_ratio.loss_ratio('invalid_input')

        with self.assertRaises(ValueError):
            self.beta_loss_ratio.loss_ratio(np.array([-0.1, 0.5, 1.2]))

    def test_probability_of_exceedance_2d_array_input(self):
        input_2d_array = np.array([[0.6, 0.7, 0.8], [0.2, 0.3, 0.4]])
        result = self.beta_loss_ratio.probability_of_exceedance(input_2d_array)
        self.assertIsInstance(result, np.ndarray, "Probability result for 2D array input is not a NumPy array")
        self.assertEqual(result.shape, input_2d_array.shape, "Output array shape mismatch")

    def test_loss_ratio_2d_array_input(self):
        input_2d_array = np.array([[0.6, 0.7, 0.8], [0.2, 0.3, 0.4]])
        result = self.beta_loss_ratio.loss_ratio(input_2d_array)
        self.assertIsInstance(result, np.ndarray, "Loss ratio result for 2D array input is not a NumPy array")
        self.assertEqual(result.shape, input_2d_array.shape, "Output array shape mismatch")

    def test_probability_of_exceedance_value_below_zero(self):
        with self.assertRaises(ValueError):
            self.beta_loss_ratio.probability_of_exceedance(-0.1)

    def test_probability_of_exceedance_value_above_one(self):
        with self.assertRaises(ValueError):
            self.beta_loss_ratio.probability_of_exceedance(1.2)

    def test_probability_of_exceedance_array_values_below_zero(self):
        invalid_array = np.array([-0.1, 0.5, 0.8])
        with self.assertRaises(ValueError):
            self.beta_loss_ratio.probability_of_exceedance(invalid_array)

    def test_probability_of_exceedance_array_values_above_one(self):
        invalid_array = np.array([0.2, 0.9, 1.5])
        with self.assertRaises(ValueError):
            self.beta_loss_ratio.probability_of_exceedance(invalid_array)


if __name__ == '__main__':
    unittest.main()
#%%
